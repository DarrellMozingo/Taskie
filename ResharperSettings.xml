<CodeStyleSettings>
  <AgentSmithCSharpStyleSettings version="1">
    <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
      <CustomDictionaries>
        <Dictionaries>
          <CustomDictionary>
            <Name>en-US</Name>
            <CaseSensitive>false</CaseSensitive>
            <UserWords>http
nacha
nachas
username
odfi
timestamp
aba
prev
curr
unexported
eins
enumerables
enumerables
Futa
Fica
Suta
paycode
paycodes
foo
Linq
Html
nullable
worksite
Dropdown
Javascript</UserWords>
          </CustomDictionary>
        </Dictionaries>
      </CustomDictionaries>
      <StringsDictionary>en-US</StringsDictionary>
      <IdentifierDictionary>en-US</IdentifierDictionary>
      <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
      <CommentsSettings>
        <DictionaryName>en-US</DictionaryName>
        <CommentMatch />
        <CommentNotMatch />
        <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
        <MaxLineLength>80</MaxLineLength>
      </CommentsSettings>
      <NamingConventionSettings>
        <Rules>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Enum</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>EnumerationMember</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches>
              <Match>
                <AccessLevel>Public</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>PatriotPay.UnitTests.Infrastructure.Testing.SpecBase</InheritedFrom>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
                <Namespace />
              </Match>
            </NotMatches>
            <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                <Declaration>Property</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Public Internal ProtectedInternal</AccessLevel>
                <Declaration>Method</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                <Declaration>Event</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches />
            <Description>Non private properties, methods, events should be in pascal.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Private</AccessLevel>
                <Declaration>Method</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Private</AccessLevel>
                <Declaration>Event</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches />
            <Description>Private properties, methods, events should be in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Private Protected ProtectedInternal</AccessLevel>
                <Declaration>Field</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <IsOfType />
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Private</AccessLevel>
                <Declaration>Property</Declaration>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <IsOfType />
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches />
            <Description>Fields should be underscore camel.</Description>
            <MustHavePrefixes>
              <string>_</string>
            </MustHavePrefixes>
            <MustNotHavePrefixes>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Variable</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Variable should be declared in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Parameter</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Function parameters should be in camel.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Camel</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Namespace</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Namespaces should be in Pascal.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>_</string>
              <string>m_</string>
            </MustNotHavePrefixes>
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Any</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Constant</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </NotMatches>
            <Description>Acronyms should not have more than 2 characters.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>MatchesRegex</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
            <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches>
              <Match>
                <AccessLevel>Public</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>Synergy.Extensions.Testing.SpecBase</InheritedFrom>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
                <Namespace />
              </Match>
              <Match>
                <AccessLevel>Protected</AccessLevel>
                <Declaration>Method</Declaration>
                <MarkedWithAttribute>Synergy.Extensions.Testing.SpecBase</MarkedWithAttribute>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </NotMatches>
            <Description>TestFixtures (except Specs) should end with Fixture.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>Test</string>
            </MustNotHavePrefixes>
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Fixture</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Enum</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Enumerations should not end with Enum.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes>
              <string>Enum</string>
            </MustNotHaveSuffixes>
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>EnumerationMember</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Do not name enumerations reserved.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>NotMatchesRegex</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
            <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Event</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Event should not have Before or After prefix.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes>
              <string>Before</string>
              <string>After</string>
            </MustNotHavePrefixes>
            <Rule>None</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Enum</Declaration>
                <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Flags enums should have plural names</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>s</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Attribute</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Attribute should end with Attribute.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Attribute</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.EventArgs</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>EventArgs should end with EventArgs.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>EventArgs</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Exception</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Exceptions should end with Exception.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Exception</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Stack</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches />
            <Description>Stack should end with Collection or Stack.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Collection</string>
              <string>Stack</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <NotMatches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Stack</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Queue</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                <MarkedWithAttribute />
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </NotMatches>
            <Description>Collections should end with Collection.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Collection</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Dictionary should end with Dictionary.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Dictionary</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Class</Declaration>
                <InheritedFrom>System.Collections.Queue</InheritedFrom>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Queue should end with Collection or Queue.</Description>
            <MustHavePrefixes />
            <MustNotHavePrefixes />
            <Rule>None</Rule>
            <MustHaveSuffixes>
              <string>Collection</string>
              <string>Queue</string>
            </MustHaveSuffixes>
            <MustNotHaveSuffixes />
          </NamingConventionRule>
          <NamingConventionRule>
            <IsDisabled>false</IsDisabled>
            <Matches>
              <Match>
                <AccessLevel>Any</AccessLevel>
                <Declaration>Interface</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </Matches>
            <Description>Interfaces should be in Pascal and start with I.</Description>
            <MustHavePrefixes>
              <string>I</string>
            </MustHavePrefixes>
            <MustNotHavePrefixes />
            <Rule>Pascal</Rule>
            <MustHaveSuffixes />
            <MustNotHaveSuffixes />
          </NamingConventionRule>
        </Rules>
        <Exclusions />
      </NamingConventionSettings>
      <IdentifiersToSpellCheck>
        <Match>
          <AccessLevel>Any</AccessLevel>
          <Declaration>Any</Declaration>
          <IsReadOnly>Maybe</IsReadOnly>
          <IsStatic>Maybe</IsStatic>
          <ParamDirection>Any</ParamDirection>
        </Match>
      </IdentifiersToSpellCheck>
      <IdentifiersNotToSpellCheck />
      <PatternsToIgnore>
        <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
        <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
      </PatternsToIgnore>
    </CodeStyleSettings>
  </AgentSmithCSharpStyleSettings>
  <CSharp>
    <FormatSettings>
      <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
      <BLANK_LINES_INSIDE_REGION>0</BLANK_LINES_INSIDE_REGION>
      <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
      <FORCE_FIXED_BRACES_STYLE>ALWAYS_ADD</FORCE_FIXED_BRACES_STYLE>
      <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
      <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
      <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
      <FORCE_USING_BRACES_STYLE>ALWAYS_ADD</FORCE_USING_BRACES_STYLE>
      <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
      <INDENT_SIZE>4</INDENT_SIZE>
      <INITIALIZER_BRACES>NEXT_LINE_SHIFTED</INITIALIZER_BRACES>
      <INSERT_TABS>True</INSERT_TABS>
      <MODIFIERS_ORDER IsNull="False">
        <Item>public</Item>
        <Item>protected</Item>
        <Item>internal</Item>
        <Item>private</Item>
        <Item>new</Item>
        <Item>abstract</Item>
        <Item>virtual</Item>
        <Item>override</Item>
        <Item>sealed</Item>
        <Item>static</Item>
        <Item>readonly</Item>
        <Item>extern</Item>
        <Item>unsafe</Item>
        <Item>volatile</Item>
      </MODIFIERS_ORDER>
      <PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>False</PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>
      <PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>False</PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>
      <PLACE_SIMPLE_LINQ_ON_SINGLE_LINE>False</PLACE_SIMPLE_LINQ_ON_SINGLE_LINE>
      <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
      <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
      <SPACE_BEFORE_ATTRIBUTE_COLON>True</SPACE_BEFORE_ATTRIBUTE_COLON>
      <SPACE_BEFORE_FIXED_PARENTHESES>False</SPACE_BEFORE_FIXED_PARENTHESES>
      <SPACE_BEFORE_SIZEOF_PARENTHESES>False</SPACE_BEFORE_SIZEOF_PARENTHESES>
      <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
      <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
      <STICK_COMMENT>False</STICK_COMMENT>
      <WRAP_LIMIT>171</WRAP_LIMIT>
      <WRAP_LINES>False</WRAP_LINES>
      <WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE>CHOP_ALWAYS</WRAP_MULTIPLE_TYPE_PARAMEER_CONSTRAINTS_STYLE>
      <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
    </FormatSettings>
    <UsingsSettings>
      <AllowAlias>False</AllowAlias>
      <CanUseGlobalAlias>False</CanUseGlobalAlias>
    </UsingsSettings>
    <Naming2>
      <ExceptionName IsNull="False">
      </ExceptionName>
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
    </Naming2>
  </CSharp>
  <VB>
    <FormatSettings>
      <INDENT_SIZE>4</INDENT_SIZE>
      <INSERT_TABS>True</INSERT_TABS>
    </FormatSettings>
    <ImportsSettings />
    <Naming2 />
  </VB>
  <GenerateMemberBody />
  <Naming2>
    <ExceptionName IsNull="False">
    </ExceptionName>
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
    <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
    <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
    <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
    <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
    <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
  </Naming2>
</CodeStyleSettings>